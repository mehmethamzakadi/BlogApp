version: "3.8"

x-app-environment: &app-environment
  ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
  ASPNETCORE_URLS: ${ASPNETCORE_URLS:-http://0.0.0.0:8080}

services:
  blogapp.api:
    image: ${DOCKER_REGISTRY-}blogappapi
    build:
      context: .
      dockerfile: src/BlogApp.API/Dockerfile
    environment:
      <<: *app-environment
      RabbitMQOptions__HostName: rabbitmq
      RabbitMQOptions__UserName: ${RABBITMQ_DEFAULT_USER:-blogapp}
      RabbitMQOptions__Password: ${RABBITMQ_DEFAULT_PASS:-supersecret}
    expose:
      - "8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgresdb:
        condition: service_started
      redis.cache:
        condition: service_started

  postgresdb:
    container_name: postgresdb
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-BlogAppDb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-blogapp}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-supersecret}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq       # ✅ düzeltilmiş (mnesia alt dizini kaldırıldı)
    ports:
      - "15672:15672"  # Yönetim paneli (opsiyonel)
      - "5672:5672"    # AMQP bağlantısı
    restart: always
    healthcheck:       # ✅ RabbitMQ tamamen hazır olmadan API başlamasın
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis.cache:
    image: redis:latest
    container_name: redis_server
    restart: always
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
