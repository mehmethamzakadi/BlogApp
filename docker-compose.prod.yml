version: "3.8"

services:
  blogapp.api:
    image: ${DOCKER_REGISTRY-}blogappapi
    build:
      context: .
      dockerfile: src/BlogApp.API/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ASPNETCORE_URLS: http://0.0.0.0:8080
      ConnectionStrings__DefaultConnection: "Host=postgresdb;Port=5432;Database=${POSTGRES_DB:-BlogAppDb};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-postgres}"
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - blogapp_net
    ports:
      - "8080:8080"  # API doÄŸrudan test etmek istersen
    restart: always

  postgresdb:
    container_name: postgresdb
    image: postgres:14
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-BlogAppDb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    restart: always
    healthcheck:
      test:
        - CMD-SHELL
        - PGPASSWORD=$${POSTGRES_PASSWORD:-postgres} pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-BlogAppDb} -h localhost
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 5s
    networks:
      - blogapp_net

  nginx:
    image: nginx:1.25
    depends_on:
      - blogapp.api
    volumes:
      - ./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "80:80"
    networks:
      - blogapp_net
    restart: always

volumes:
  postgres_data:

networks:
  blogapp_net:
    driver: bridge
